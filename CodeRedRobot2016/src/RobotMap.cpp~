// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::scalingscaleLift;
std::shared_ptr<Encoder> RobotMap::scalingscaleEnc;
std::shared_ptr<DigitalInput> RobotMap::scalingscaleLimit;
std::shared_ptr<CANTalon> RobotMap::armarmLift;
std::shared_ptr<Encoder> RobotMap::armarmEnc;
std::shared_ptr<DigitalInput> RobotMap::armarmHallBot;
std::shared_ptr<DigitalInput> RobotMap::armarmHallTop;
std::shared_ptr<CANTalon> RobotMap::acquisitionacqRoller;
std::shared_ptr<DigitalInput> RobotMap::acquisitionacqStop1;
std::shared_ptr<DigitalInput> RobotMap::acquisitionacqStop2;
std::shared_ptr<CANTalon> RobotMap::drivelDrive1;
std::shared_ptr<CANTalon> RobotMap::drivelDrive2;
std::shared_ptr<CANTalon> RobotMap::driverDrive1;
std::shared_ptr<CANTalon> RobotMap::driverDrive2;
std::shared_ptr<Encoder> RobotMap::drivelEnc;
std::shared_ptr<Encoder> RobotMap::driverEnc;
std::shared_ptr<Solenoid> RobotMap::driveshift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    scalingscaleLift.reset(new CANTalon(6));
    lw->AddActuator("Scaling", "scaleLift", scalingscaleLift);
    
    scalingscaleEnc.reset(new Encoder(10, 11, false, Encoder::k4X));
    lw->AddSensor("Scaling", "scaleEnc", scalingscaleEnc);
    scalingscaleEnc->SetDistancePerPulse(1.0);
    scalingscaleEnc->SetPIDSourceType(PIDSourceType::kRate);
    scalingscaleLimit.reset(new DigitalInput(12));
    lw->AddSensor("Scaling", "scaleLimit", scalingscaleLimit);
    
    armarmLift.reset(new CANTalon(5));
    lw->AddActuator("Arm", "armLift", armarmLift);
    
    armarmEnc.reset(new Encoder(6, 7, false, Encoder::k4X));
    lw->AddSensor("Arm", "armEnc", armarmEnc);
    armarmEnc->SetDistancePerPulse(1.0);
    armarmEnc->SetPIDSourceType(PIDSourceType::kRate);
    armarmHallBot.reset(new DigitalInput(8));
    lw->AddSensor("Arm", "armHallBot", armarmHallBot);
    
    armarmHallTop.reset(new DigitalInput(9));
    lw->AddSensor("Arm", "armHallTop", armarmHallTop);
    
    acquisitionacqRoller.reset(new CANTalon(4));
    lw->AddActuator("Acquisition", "acqRoller", acquisitionacqRoller);
    
    acquisitionacqStop1.reset(new DigitalInput(4));
    lw->AddSensor("Acquisition", "acqStop1", acquisitionacqStop1);
    
    acquisitionacqStop2.reset(new DigitalInput(5));
    lw->AddSensor("Acquisition", "acqStop2", acquisitionacqStop2);
    
    drivelDrive1.reset(new CANTalon(0));
    lw->AddActuator("Drive", "lDrive1", drivelDrive1);
    
    drivelDrive2.reset(new CANTalon(1));
    lw->AddActuator("Drive", "lDrive2", drivelDrive2);
    
    driverDrive1.reset(new CANTalon(2));
    lw->AddActuator("Drive", "rDrive1", driverDrive1);
    
    driverDrive2.reset(new CANTalon(3));
    lw->AddActuator("Drive", "rDrive2", driverDrive2);
    
    drivelEnc.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("Drive", "lEnc", drivelEnc);
    drivelEnc->SetDistancePerPulse(1.0);
    drivelEnc->SetPIDSourceType(PIDSourceType::kRate);
    driverEnc.reset(new Encoder(2, 3, false, Encoder::k4X));
    lw->AddSensor("Drive", "rEnc", driverEnc);
    driverEnc->SetDistancePerPulse(1.0);
    driverEnc->SetPIDSourceType(PIDSourceType::kRate);
    driveshift.reset(new Solenoid(0, 0));
    lw->AddActuator("Drive", "shift", driveshift);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
