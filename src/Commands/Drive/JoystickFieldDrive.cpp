// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "JoystickFieldDrive.h"
#include "CANTalon.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

JoystickFieldDrive::JoystickFieldDrive(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void JoystickFieldDrive::Initialize() {
	Robot::drive->ChangeControlMode(CANTalon::ControlMode::kPercentVbus);
}


// Called repeatedly when this Command is scheduled to run
void JoystickFieldDrive::Execute() {
	double joyStickY = Robot::oi->GetYLeft();
	double joyStickX = Robot::oi->GetXLeft();
	double joyStickAngle = atan2(joyStickY, joyStickX);
	int currentAngle = Robot::drive->GetYaw();
	double magnitude = sqrt(joyStickX * joyStickX + joyStickY * joyStickY);
	double angleDiff = angle_diff(joyStickAngle, currentAngle);
	if (angleDiff > 0)
	{
		if (angleDiff > 90)
		{
			Robot::drive->TankDrive(magnitude, magnitude * -0.2);
		}
		else
		{
			Robot::drive->TankDrive(magnitude, magnitude * angleDiff / 90);
		}
	}
	else if (angleDiff < 0)
	{
		if (angleDiff < -90)
		{
			Robot::drive->TankDrive(magnitude * -0.2, magnitude);
		}
		else
		{
			Robot::drive->TankDrive(magnitude * angleDiff / -90, magnitude);
		}
	}
	else
	{
		Robot::drive->TankDrive(magnitude, magnitude);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool JoystickFieldDrive::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void JoystickFieldDrive::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void JoystickFieldDrive::Interrupted() {

}
