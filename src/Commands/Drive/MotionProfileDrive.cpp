// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "MotionProfileDrive.h"

#define ENC_LOW_SPEED_MAX 1250 * 2
#define ENC_HIGH_SPEED_MAX 4000 * 2

bool hitTopCnt;
MotionProfileDrive::MotionProfileDrive(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}


// Called just before this Command runs the first time
void MotionProfileDrive::Initialize() {
	    Robot::drive->FillTalons(speedPts, 43);
		Robot::drive->ChangeControlMode(CANTalon::kMotionProfile);
		Robot::drive->SetDrivePID(0.3, 0, 0.08, 0.5);
		Robot::drive->RunMotionProfile();
		hitTopCnt = false;
}

// Called repeatedly when this Command is scheduled to run
void MotionProfileDrive::Execute() {
	CANTalon::MotionProfileStatus _status;
	Robot::drive->rDrive1->GetMotionProfileStatus(_status);
	if (_status.btmBufferCnt >= 43)
	{
		Robot::drive->StartMotionProfile();
		hitTopCnt = true;
	}
	else if (!hitTopCnt)
	{
		Robot::drive->RunMotionProfile();
	}
	printf("BUFFER CNT %d\n", _status.btmBufferCnt);
	SmartDashboard::PutNumber("rDriveEnc_speed", Robot::drive->GetREncSpeed());
	SmartDashboard::PutNumber("lDriveEnc_speed", Robot::drive->GetLEncSpeed());
}

// Make this return true when this Command no longer needs to run execute()
bool MotionProfileDrive::IsFinished() {
	CANTalon::MotionProfileStatus _status;
	Robot::drive->rDrive1->GetMotionProfileStatus(_status);
	if(_status.btmBufferCnt == 1)
		return true;
	else
		return false;
}

// Called once after isFinished returns true
void MotionProfileDrive::End(){
	Robot::drive->ChangeControlMode(CANTalon::ControlMode::kSpeed);
	Robot::drive->SetDrivePID(0.2, 0, 0.1, 0.4);
	Robot::drive->TankDrive(0,0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MotionProfileDrive::Interrupted() {

}
