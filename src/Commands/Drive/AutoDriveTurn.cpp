// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoDriveTurn.h"

double AutoDriveTurn::m_derivative_coeff = 0.01;
double AutoDriveTurn::m_integral_coeff = 0.01;
double AutoDriveTurn::m_prop_coeff = 0.01;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoDriveTurn::AutoDriveTurn(double speed, double angle): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
//	m_speed = speed;
	m_angle = angle;
//	m_ticks = m_angle * TICKS_FROM_ANGLE;
}

int AutoDriveTurn::mod(int a, int n){
	return a - floor(a/n) * n;
}

double AutoDriveTurn::angle_diff(int a, int b){
	return mod((a-b) + 180, 360) - 180;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoDriveTurn::Initialize() {
//	m_startTicksLeft = Robot::drive->GetLeftEnc();
//	m_startTicksRight = Robot::drive->GetRightEnc();
//	if (m_ticks < 0)
//	{
//		m_speed = m_speed * -1;
//	}
}

// Called repeatedly when this Command is scheduled to run
void AutoDriveTurn::Execute() {
	double c_angle = Robot::drive->GetYaw();
	double ca_diff = angle_diff(c_angle, m_angle);
	double p_now = m_prop_coeff * ca_diff;
	double d_now = m_derivative_coeff * (ca_diff - m_derivative);
	m_derivative = m_angle;
	double i_now = m_integral_coeff * (m_integral += ca_diff);
	double speed = p_now + i_now + d_now;
	Robot::drive->TankDrive(-speed, speed);//TODO: Maybe flip which one is negative
}

// Make this return true when this Command no longer needs to run execute()
bool AutoDriveTurn::IsFinished() {
	//return (fabs(Robot::drive->GetLeftEnc() - m_startTicksLeft) > fabs(m_ticks) && fabs(Robot::drive->GetRightEnc() - m_startTicksRight) > fabs(m_ticks));
	return angle_diff(Robot::drive->GetYaw(),m_angle) < 5;
}

// Called once after isFinished returns true
void AutoDriveTurn::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoDriveTurn::Interrupted() {

}
