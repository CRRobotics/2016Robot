// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#define ENC_LOW_SPEED_MAX 1250 * 2
#define ENC_HIGH_SPEED_MAX 4000 * 2

#include "SpeedDrive.h"


SpeedDrive::SpeedDrive(double speed): Command() {
        // Use requires() here to declare subsystem dependencies
	m_speed = speed;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}


// Called just before this Command runs the first time
void SpeedDrive::Initialize() {
	//m_speed = SmartDashboard::GetNumber("drive_test_speed", 0);
	Robot::drive->ChangeControlMode(CANTalon::ControlMode::kSpeed);
	if (Robot::drive->GetHighGear())
		Robot::drive->SetDrivePID(.2, 0, 0, .05);
	else
		Robot::drive->SetDrivePID(.9, 0, 0, 0.1);

	if (Robot::drive->GetHighGear())
		Robot::drive->TankDrive(m_speed * ENC_HIGH_SPEED_MAX, m_speed * ENC_HIGH_SPEED_MAX);
	else
		Robot::drive->TankDrive(m_speed * ENC_LOW_SPEED_MAX, m_speed * ENC_LOW_SPEED_MAX);
}

// Called repeatedly when this Command is scheduled to run
void SpeedDrive::Execute() {

//	Robot::drive->TankDrive(Robot::oi->GetYLeft(), Robot::oi->GetYRight());
	//changed to linear for closed loop speed control
	if (Robot::drive->GetHighGear())
		Robot::drive->TankDrive(m_speed * ENC_HIGH_SPEED_MAX, m_speed * ENC_HIGH_SPEED_MAX);
	else
		Robot::drive->TankDrive(m_speed * ENC_LOW_SPEED_MAX, m_speed * ENC_LOW_SPEED_MAX);
	SmartDashboard::PutNumber("lDriveEnc ", Robot::drive->GetLeftEnc());
	SmartDashboard::PutNumber("rDriveEnc ", Robot::drive->GetRightEnc());
	SmartDashboard::PutNumber("lDriveEnc_speed", Robot::drive->GetLEncSpeed());
	SmartDashboard::PutNumber("rDriveEnc_speed", Robot::drive->GetREncSpeed());
}

// Make this return true when this Command no longer needs to run execute()
bool SpeedDrive::IsFinished() {
    return fabs(Robot::oi->GetYLeft()) > 0 || fabs(Robot::oi->GetYRight()) > 0;
}

// Called once after isFinished returns true
void SpeedDrive::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SpeedDrive::Interrupted() {

}
