// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Arm.h"
#include "../RobotMap.h"
#include "../Commands/Arm/JoystickArm.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Arm::Arm() : Subsystem("Arm") {
    armPot = RobotMap::armarmPot;
    armLift = RobotMap::armarmLift;
    armHallTop = RobotMap::armarmHallTop;
    armHallBot = RobotMap::armarmHallBot;
    armAssist = RobotMap::armarmAssist;
    m_armLocked = false;
}

void Arm::InitDefaultCommand() {
	SetDefaultCommand(new JoystickArm());
}

void Arm::SetArmSpeed(double speed)
{
	ChangeControlMode(CANTalon::ControlMode::kPercentVbus);
	armLift->Set(speed);
}

bool Arm::IsArmTopLimit(){
	return armHallTop->Get();
}

bool Arm::IsArmBotLimit(){
	return armHallBot->Get();
}

double Arm::GetArmPos(){
	return armLift->GetAnalogInRaw();
}


bool Arm::IsArmAtPoint(Position pos){
	return fabs(armPot->Get() - GetPotValueForPos(pos)) < 0.2;//TODO: Change 0.2 to a more meaningful value
}

double Arm::GetPotValueForPos(Position pos){
	switch (pos)
	{
		case Position::POS_DOWN:
			return 1;
		break;
		case Position::POS_DRAW:
			return 2;
		break;
		case Position::POS_DRAW_LOWER:
			return 1.75;
		break;
		case Position::POS_PORT:
			return 3;
		break;
		case Position::POS_SALLY:
			return 4;
		break;
		case Position::POS_SCALE:
			return 5;
		break;
		default:
			return -1;
	}
}

void Arm::ArmToPos(Position pos){
	armLift->SetControlMode(CANTalon::ControlMode::kPosition);
	armLift->Set(GetPotValueForPos(pos));
}

void Arm::SetArmLocked(bool locked){
	m_armLocked = locked;
}

bool Arm::IsArmLocked(){
	return m_armLocked;
}

void Arm::ChangeControlMode(CANTalon::ControlMode mode){
	armLift->SetControlMode(mode);
	if (mode == CANTalon::ControlMode::kPosition){
		armLift->SetPIDSourceType(PIDSourceType::kDisplacement);
		((std::shared_ptr<CANSpeedController>)armLift)->SetPID(1, 0, 0);
	}
}

void Arm::ArmAssist(bool high) {
	armAssist->Set(high);
}
