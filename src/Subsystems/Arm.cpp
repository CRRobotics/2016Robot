// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Arm.h"
#include "../RobotMap.h"
#include "../Commands/Arm/RunArmToPos.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Arm::Arm() : Subsystem("Arm") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    armPot = RobotMap::armarmPot;
    armLift = RobotMap::armarmLift;
    armHallTop = RobotMap::armarmHallTop;
    armHallBot = RobotMap::armarmHallBot;
    m_setPoint = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Arm::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new RunArmToPos());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Arm::SetArmSpeed(double speed)
{
	armLift->SetControlMode(CANSpeedController::kSpeed);
	armLift->Set(speed);
}

bool Arm::IsArmTopLimit(){
	return armHallTop->Get();
}

bool Arm::IsArmBotLimit(){
	return armHallBot->Get();
}

double Arm::GetArmEnc(){
	return armPot->Get();
}

void Arm::SetArmSetPoint(double point){
	m_setPoint = point;
}

void Arm::ArmDriveToPoint(double point){
	armLift->SetControlMode(CANSpeedController::kPosition);
	armLift->Set(point);
}

void Arm::ArmDriveToSetPoint(){
	armLift->SetControlMode(CANSpeedController::kPosition);
	armLift->Set(m_setPoint);
}

bool Arm::IsArmAtPoint(double point){
	return fabs(armPot->Get() - point) < 0.2;//TODO: Change 0.2 to a more meaningful value
}

bool Arm::IsArmAtSetPoint(){
	return Arm::IsArmAtPoint(m_setPoint);
}
