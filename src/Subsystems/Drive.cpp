// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drive.h"
#include "../RobotMap.h"
#include "../Commands/Drive/JoystickDrive.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drive::Drive() : Subsystem("Drive") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    lDrive1 = RobotMap::drivelDrive1;
    lDrive2 = RobotMap::drivelDrive2;
    rDrive1 = RobotMap::driverDrive1;
    rDrive2 = RobotMap::driverDrive2;
    shiftGear = RobotMap::driveshiftGear;
    ahrs = RobotMap::driveahrs;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drive::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new JoystickDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.


void Drive::Shift(bool high) {
	shiftGear->Set(high);
}

bool Drive::GetHighGear(){
	return shiftGear->Get();
}

void Drive::ChangeControlMode(CANTalon::ControlMode mode){
	rDrive1->SetControlMode(mode);
	lDrive1->SetControlMode(mode);
	if (mode == CANTalon::ControlMode::kSpeed)
	{
		 rDrive1->SetPIDSourceType(PIDSourceType::kRate);
		 lDrive1->SetPIDSourceType(PIDSourceType::kRate);
	}
}

void Drive::TankDrive(double lSpeed, double rSpeed) {
	lDrive1->Set(lSpeed);
	rDrive1->Set(-rSpeed);
}

void Drive::SetDrivePID(double p, double i, double d, double f){
    rDrive1->SetPID(p, i, d, f);
    lDrive1->SetPID(p, i, d, f);
    lDrive1->SetSensorDirection(true);
}

int Drive::GetLeftEnc(){
	return lDrive1->GetEncPosition();
}

int Drive::GetRightEnc(){
	return rDrive1->GetEncPosition();
}

void Drive::ResetNavX(){
	ahrs->ZeroYaw();
	ahrs->ResetDisplacement();
}

float Drive::GetYaw(){
	return ahrs->GetYaw();
}

float Drive::GetXAccel(){
	return ahrs->GetWorldLinearAccelX();
}

float Drive::GetYAccel(){
	return ahrs->GetWorldLinearAccelY();
}

float Drive::GetXDisplacement(){
	return ahrs->GetDisplacementX();
}

float Drive::GetYDisplacement(){
	return ahrs->GetDisplacementY();
}

double Drive::GetLEncSpeed(){
	return lDrive1->GetEncVel();
}

double Drive::GetREncSpeed(){
	return rDrive1->GetEncVel();
}
